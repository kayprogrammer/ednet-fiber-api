{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "## A Full-Featured EDTECH API built with FIBER \u0026 ENT ORM.\n\n\u003c!-- ### WEBSOCKETS:\n\n#### Notifications\n\n- URL: `wss://{host}/api/v4/ws/notifications`\n\n- Requires authorization, so pass in the Bearer Authorization header.\n\n- You can only read and not send notification messages into this socket. --\u003e\n\n\n\u003c!-- #### Chats\n\n- URL: `wss://{host}/api/v4/ws/chats/{id}`\n- Requires authorization, so pass in the Bearer Authorization header.\n- Use chat_id as the ID for an existing chat or username if it's the first message in a DM.\n- You cannot read realtime messages from a username that doesn't belong to the authorized user, but you can surely send messages.\n- Only send a message to the socket endpoint after the message has been created or updated, and files have been uploaded.\n- Fields when sending a message through the socket:\n\n  ```json\n  { \"status\": \"CREATED\", \"id\": \"fe4e0235-80fc-4c94-b15e-3da63226f8ab\" }\n  ``` --\u003e",
        "title": "EDNET API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/auth/google": {
            "post": {
                "description": "`This endpoint generates new access and refresh tokens for authentication via google`\n`Pass in token gotten from gsi client authentication here in payload to retrieve tokens for authorization`",
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user via google",
                "parameters": [
                    {
                        "description": "Google auth",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.TokenSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/accounts.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "`This endpoint generates new access and refresh tokens for authentication`",
                "tags": [
                    "Auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.LoginSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/accounts.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint logs a user out from our application from a single device`",
                "tags": [
                    "Auth"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/base.ResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/logout/all": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint logs a user out from our application from all devices`",
                "tags": [
                    "Auth"
                ],
                "summary": "Logout a user from all devices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/base.ResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "`This endpoint refresh tokens by generating new access and refresh tokens for a user`",
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.TokenSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/accounts.LoginResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "`This endpoint registers new users into our application.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User object",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.RegisterSchema"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/accounts.RegisterResponseSchema"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/resend-verification-email": {
            "post": {
                "description": "`This endpoint resends new otp to the user's email.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Resend Verification Email",
                "parameters": [
                    {
                        "description": "Email object",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.EmailRequestSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/base.ResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/send-password-reset-otp": {
            "post": {
                "description": "`This endpoint sends new password reset otp to the user's email.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Send Password Reset Otp",
                "parameters": [
                    {
                        "description": "Email object",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.EmailRequestSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/base.ResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/set-new-password": {
            "post": {
                "description": "`This endpoint verifies the password reset otp.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Set New Password",
                "parameters": [
                    {
                        "description": "Password reset object",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.SetNewPasswordSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/base.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/base.InvalidErrorExample"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "description": "`This endpoint verifies a user's email.`",
                "tags": [
                    "Auth"
                ],
                "summary": "Verify a user's email",
                "parameters": [
                    {
                        "description": "Email object",
                        "name": "email_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accounts.VerifyEmailRequestSchema"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/base.ResponseSchema"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/base.InvalidErrorExample"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        },
        "/courses": {
            "get": {
                "description": "This endpoint retrieves paginated responses of latest courses",
                "tags": [
                    "Courses"
                ],
                "summary": "Retrieve Latest Courses",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Page Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter By Title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter By Instructor's Name Or Username",
                        "name": "instructor",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter By Free Status",
                        "name": "isFree",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/courses.CoursesResponseSchema"
                        }
                    }
                }
            }
        },
        "/courses/{course_slug}/lessons/{lesson_slug}": {
            "get": {
                "description": "This endpoint retrieves the details of a particular lesson",
                "tags": [
                    "Courses"
                ],
                "summary": "Retrieve Lesson Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/courses.LessonResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    }
                }
            }
        },
        "/courses/{slug}": {
            "get": {
                "description": "This endpoint retrieves the details of a particular course",
                "tags": [
                    "Courses"
                ],
                "summary": "Retrieve Course Details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/courses.CourseResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    }
                }
            }
        },
        "/courses/{slug}/lessons": {
            "get": {
                "description": "This endpoint retrieves paginated responses of a course lessons",
                "tags": [
                    "Courses"
                ],
                "summary": "Retrieve Course Lessons",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course Slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Current Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Page Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter By Title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter By Free Preview",
                        "name": "isFreePreview",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/courses.LessonsResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/base.NotFoundErrorExample"
                        }
                    }
                }
            }
        },
        "/general/site-detail": {
            "get": {
                "description": "This endpoint retrieves few details of the site/application.",
                "tags": [
                    "General"
                ],
                "summary": "Retrieve site details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/general.SiteDetailResponseSchema"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "This endpoint checks the health of our application.",
                "tags": [
                    "HealthCheck"
                ],
                "summary": "HealthCheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.HealthCheckSchema"
                        }
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to view his/her profile`",
                "tags": [
                    "Profiles"
                ],
                "summary": "Get Your Profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfileResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "`This endpoint allows a user to update his/her profile`",
                "tags": [
                    "Profiles"
                ],
                "summary": "Update Your Profile",
                "parameters": [
                    {
                        "maxLength": 300,
                        "minLength": 10,
                        "type": "string",
                        "example": "I'm the boss",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "2000-09-12",
                        "name": "dob",
                        "in": "formData"
                    },
                    {
                        "maxLength": 150,
                        "minLength": 10,
                        "type": "string",
                        "example": "John Doe",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 50,
                        "minLength": 2,
                        "type": "string",
                        "example": "john-doe",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Profile picture to upload",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/profiles.ProfileResponseSchema"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.UnauthorizedErrorExample"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/base.ValidationErrorExample"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "accounts.EmailRequestSchema": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@email.com"
                }
            }
        },
        "accounts.LoginResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/accounts.TokensResponseSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "accounts.LoginSchema": {
            "type": "object",
            "required": [
                "email_or_username",
                "password"
            ],
            "properties": {
                "email_or_username": {
                    "type": "string",
                    "example": "johndoe"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "accounts.RegisterResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/accounts.EmailRequestSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "accounts.RegisterSchema": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@example.com"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "strongpassword"
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "example": "johndoe"
                }
            }
        },
        "accounts.SetNewPasswordSchema": {
            "type": "object",
            "required": [
                "email",
                "otp",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@email.com"
                },
                "otp": {
                    "type": "integer",
                    "example": 123456
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "newstrongpassword"
                }
            }
        },
        "accounts.TokenSchema": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ"
                }
            }
        },
        "accounts.TokensResponseSchema": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "accounts.VerifyEmailRequestSchema": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 5,
                    "example": "johndoe@email.com"
                },
                "otp": {
                    "type": "integer",
                    "example": 123456
                }
            }
        },
        "base.FieldData": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string",
                    "example": "This field is required"
                }
            }
        },
        "base.InvalidErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Request was invalid due to ..."
                },
                "status": {
                    "type": "string",
                    "example": "failure"
                }
            }
        },
        "base.NotFoundErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "The item was not found"
                },
                "status": {
                    "type": "string",
                    "example": "failure"
                }
            }
        },
        "base.ResponseSchema": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "base.UnauthorizedErrorExample": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Unauthorized user/Invalid credentials/Invalid Token"
                },
                "status": {
                    "type": "string",
                    "example": "failure"
                }
            }
        },
        "base.UserDataSchema": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://img.url"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "username": {
                    "type": "string",
                    "example": "john-doe"
                }
            }
        },
        "base.ValidationErrorExample": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/base.FieldData"
                },
                "message": {
                    "type": "string",
                    "example": "Invalid Entry"
                },
                "status": {
                    "type": "string",
                    "example": "failure"
                }
            }
        },
        "config.PaginationResponse-courses_CourseListSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/courses.CourseListSchema"
                    }
                },
                "items_count": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "config.PaginationResponse-courses_LessonListSchema": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/courses.LessonListSchema"
                    }
                },
                "items_count": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "course.Difficulty": {
            "type": "string",
            "enum": [
                "Beginner",
                "Beginner",
                "Intermediate",
                "Advanced"
            ],
            "x-enum-varnames": [
                "DefaultDifficulty",
                "DifficultyBeginner",
                "DifficultyIntermediate",
                "DifficultyAdvanced"
            ]
        },
        "course.EnrollmentType": {
            "type": "string",
            "enum": [
                "Open",
                "Restricted",
                "InviteOnly"
            ],
            "x-enum-varnames": [
                "EnrollmentTypeOpen",
                "EnrollmentTypeRestricted",
                "EnrollmentTypeInviteOnly"
            ]
        },
        "courses.CategoryOrTagSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "courses.CourseDetailSchema": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/courses.CategoryOrTagSchema"
                },
                "certification": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "difficulty": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/course.Difficulty"
                        }
                    ],
                    "example": "Beginner"
                },
                "discount_price": {
                    "type": "number"
                },
                "duration": {
                    "description": "in minutes",
                    "type": "integer"
                },
                "enrollment_type": {
                    "$ref": "#/definitions/course.EnrollmentType"
                },
                "instructor": {
                    "$ref": "#/definitions/base.UserDataSchema"
                },
                "intro_video_url": {
                    "type": "string"
                },
                "is_free": {
                    "type": "boolean",
                    "example": false
                },
                "is_published": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string",
                    "example": "English"
                },
                "lessons_count": {
                    "type": "integer",
                    "example": 20
                },
                "price": {
                    "type": "number",
                    "example": 19.99
                },
                "quizzes_count": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number",
                    "example": 4.8
                },
                "reviews_count": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string",
                    "example": "go-programming-for-beginners"
                },
                "students_count": {
                    "type": "integer",
                    "example": 1200
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://ednet-images.com/courses/go.jpg"
                },
                "title": {
                    "type": "string",
                    "example": "Go Programming for Beginners"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "courses.CourseListSchema": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/courses.CategoryOrTagSchema"
                },
                "created_at": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "difficulty": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/course.Difficulty"
                        }
                    ],
                    "example": "Beginner"
                },
                "discount_price": {
                    "type": "number"
                },
                "instructor": {
                    "$ref": "#/definitions/base.UserDataSchema"
                },
                "is_free": {
                    "type": "boolean",
                    "example": false
                },
                "language": {
                    "type": "string",
                    "example": "English"
                },
                "lessons_count": {
                    "type": "integer",
                    "example": 20
                },
                "price": {
                    "type": "number",
                    "example": 19.99
                },
                "rating": {
                    "type": "number",
                    "example": 4.8
                },
                "slug": {
                    "type": "string",
                    "example": "go-programming-for-beginners"
                },
                "students_count": {
                    "type": "integer",
                    "example": 1200
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://ednet-images.com/courses/go.jpg"
                },
                "title": {
                    "type": "string",
                    "example": "Go Programming for Beginners"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "courses.CourseResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/courses.CourseDetailSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "courses.CoursesResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/config.PaginationResponse-courses_CourseListSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "courses.LessonDetailSchema": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "is_free_preview": {
                    "type": "boolean"
                },
                "is_published": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://ednet-images.com/lessons/go.jpg"
                },
                "title": {
                    "type": "string"
                },
                "video_url": {
                    "type": "string"
                }
            }
        },
        "courses.LessonListSchema": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "is_free_preview": {
                    "type": "boolean"
                },
                "is_published": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "thumbnail_url": {
                    "type": "string",
                    "example": "https://ednet-images.com/lessons/go.jpg"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "courses.LessonResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/courses.LessonDetailSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "courses.LessonsResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/config.PaginationResponse-courses_LessonListSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "general.SiteDetailResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/general.SiteDetailSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "general.SiteDetailSchema": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "234, Lagos, Nigeria"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@email.com"
                },
                "fb": {
                    "type": "string",
                    "example": "https://facebook.com"
                },
                "ig": {
                    "type": "string",
                    "example": "https://instagram.com"
                },
                "name": {
                    "type": "string",
                    "example": "EDNET"
                },
                "phone": {
                    "type": "string",
                    "example": "+2348133831036"
                },
                "tw": {
                    "type": "string",
                    "example": "https://twitter.com"
                },
                "wh": {
                    "type": "string",
                    "example": "https://wa.me/2348133831036"
                }
            }
        },
        "profiles.ProfileResponseSchema": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/profiles.ProfileSchema"
                },
                "message": {
                    "type": "string",
                    "example": "Data fetched/created/updated/deleted"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "profiles.ProfileSchema": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://ednet-images.com/users/john-doe"
                },
                "bio": {
                    "type": "string",
                    "example": "I'm the boss"
                },
                "dob": {
                    "type": "string",
                    "example": "2000-09-12"
                },
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Role"
                        }
                    ],
                    "example": "student"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "routes.HealthCheckSchema": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "pong"
                }
            }
        },
        "user.Role": {
            "type": "string",
            "enum": [
                "student",
                "student",
                "instructor",
                "admin"
            ],
            "x-enum-varnames": [
                "DefaultRole",
                "RoleStudent",
                "RoleInstructor",
                "RoleAdmin"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type 'Bearer jwt_string' to correctly set the API Key",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}