basePath: /api/v1
consumes:
- application/json
definitions:
  accounts.EmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  accounts.LoginResponseSchema:
    properties:
      data:
        $ref: '#/definitions/accounts.TokensResponseSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  accounts.LoginSchema:
    properties:
      email_or_username:
        example: johndoe
        type: string
      password:
        example: password
        type: string
    required:
    - email_or_username
    - password
    type: object
  accounts.RegisterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/accounts.EmailRequestSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  accounts.RegisterSchema:
    properties:
      email:
        example: johndoe@example.com
        minLength: 5
        type: string
      name:
        example: John Doe
        maxLength: 50
        type: string
      password:
        example: strongpassword
        maxLength: 50
        minLength: 8
        type: string
      username:
        example: johndoe
        maxLength: 50
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  accounts.SetNewPasswordSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
      password:
        example: newstrongpassword
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - otp
    - password
    type: object
  accounts.TokenSchema:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InNpbXBsZWlkIiwiZXhwIjoxMjU3ODk0MzAwfQ.Ys_jP70xdxch32hFECfJQuvpvU5_IiTIN2pJJv68EqQ
        type: string
    required:
    - token
    type: object
  accounts.TokensResponseSchema:
    properties:
      access:
        type: string
      refresh:
        type: string
    type: object
  accounts.VerifyEmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
    required:
    - email
    - otp
    type: object
  base.FieldData:
    properties:
      field:
        example: This field is required
        type: string
    type: object
  base.InvalidErrorExample:
    properties:
      message:
        example: Request was invalid due to ...
        type: string
      status:
        example: failure
        type: string
    type: object
  base.NotFoundErrorExample:
    properties:
      message:
        example: The item was not found
        type: string
      status:
        example: failure
        type: string
    type: object
  base.ResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  base.UnauthorizedErrorExample:
    properties:
      message:
        example: Unauthorized user/Invalid credentials/Invalid Token
        type: string
      status:
        example: failure
        type: string
    type: object
  base.UserDataSchema:
    properties:
      avatar:
        example: https://img.url
        type: string
      name:
        example: John Doe
        type: string
      username:
        example: john-doe
        type: string
    type: object
  base.ValidationErrorExample:
    properties:
      data:
        $ref: '#/definitions/base.FieldData'
      message:
        example: Invalid Entry
        type: string
      status:
        example: failure
        type: string
    type: object
  config.PaginationResponse-courses_CourseListSchema:
    properties:
      items:
        items:
          $ref: '#/definitions/courses.CourseListSchema'
        type: array
      items_count:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      total_pages:
        type: integer
    type: object
  config.PaginationResponse-courses_LessonListSchema:
    properties:
      items:
        items:
          $ref: '#/definitions/courses.LessonListSchema'
        type: array
      items_count:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      total_pages:
        type: integer
    type: object
  config.PaginationResponse-courses_QuizListSchema:
    properties:
      items:
        items:
          $ref: '#/definitions/courses.QuizListSchema'
        type: array
      items_count:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      total_pages:
        type: integer
    type: object
  course.Difficulty:
    enum:
    - beginner
    - beginner
    - intermediate
    - advanced
    type: string
    x-enum-varnames:
    - DefaultDifficulty
    - DifficultyBeginner
    - DifficultyIntermediate
    - DifficultyAdvanced
  course.EnrollmentType:
    enum:
    - open
    - open
    - restricted
    - invite_only
    type: string
    x-enum-varnames:
    - DefaultEnrollmentType
    - EnrollmentTypeOpen
    - EnrollmentTypeRestricted
    - EnrollmentTypeInviteOnly
  courses.AnswerSchema:
    properties:
      question_id:
        type: string
      selected_option_id:
        type: string
    required:
    - question_id
    - selected_option_id
    type: object
  courses.CategoryOrTagSchema:
    properties:
      name:
        type: string
      slug:
        type: string
    type: object
  courses.CourseDetailSchema:
    properties:
      category:
        $ref: '#/definitions/courses.CategoryOrTagSchema'
      certification:
        type: boolean
      created_at:
        type: string
      desc:
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/course.Difficulty'
        example: Beginner
      discount_price:
        type: number
      duration:
        description: in minutes
        type: integer
      enrollment_type:
        $ref: '#/definitions/course.EnrollmentType'
      instructor:
        $ref: '#/definitions/base.UserDataSchema'
      intro_video_url:
        type: string
      is_free:
        example: false
        type: boolean
      is_published:
        example: false
        type: boolean
      language:
        example: English
        type: string
      lessons_count:
        example: 20
        type: integer
      price:
        example: 19.99
        type: number
      rating:
        example: 4.8
        type: number
      reviews_count:
        type: integer
      slug:
        example: go-programming-for-beginners
        type: string
      students_count:
        example: 1200
        type: integer
      thumbnail_url:
        example: https://ednet-images.com/courses/go.jpg
        type: string
      title:
        example: Go Programming for Beginners
        type: string
      updated_at:
        type: string
    type: object
  courses.CourseListSchema:
    properties:
      category:
        $ref: '#/definitions/courses.CategoryOrTagSchema'
      created_at:
        type: string
      desc:
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/course.Difficulty'
        example: Beginner
      discount_price:
        type: number
      instructor:
        $ref: '#/definitions/base.UserDataSchema'
      is_free:
        example: false
        type: boolean
      is_published:
        example: false
        type: boolean
      language:
        example: English
        type: string
      lessons_count:
        example: 20
        type: integer
      price:
        example: 19.99
        type: number
      rating:
        example: 4.8
        type: number
      slug:
        example: go-programming-for-beginners
        type: string
      students_count:
        example: 1200
        type: integer
      thumbnail_url:
        example: https://ednet-images.com/courses/go.jpg
        type: string
      title:
        example: Go Programming for Beginners
        type: string
      updated_at:
        type: string
    type: object
  courses.CourseResponseSchema:
    properties:
      data:
        $ref: '#/definitions/courses.CourseDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.CoursesResponseSchema:
    properties:
      data:
        $ref: '#/definitions/config.PaginationResponse-courses_CourseListSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.EnrollForACourseSchema:
    properties:
      cancel_url:
        example: https://domain-example.com/payment-cancelled
        type: string
      success_url:
        example: https://domain-example.com/payment-success
        type: string
    required:
    - cancel_url
    - success_url
    type: object
  courses.EnrollmentResponseSchema:
    properties:
      data:
        $ref: '#/definitions/courses.EnrollmentSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.EnrollmentSchema:
    properties:
      checkout_url:
        type: string
      course:
        $ref: '#/definitions/courses.CourseListSchema'
      payment_status:
        $ref: '#/definitions/enrollment.PaymentStatus'
      progress:
        type: integer
      status:
        $ref: '#/definitions/enrollment.Status'
      user:
        $ref: '#/definitions/base.UserDataSchema'
    type: object
  courses.LessonDetailSchema:
    properties:
      content:
        type: string
      desc:
        type: string
      duration:
        type: integer
      is_free_preview:
        type: boolean
      is_published:
        type: boolean
      order:
        type: integer
      quizzes_count:
        type: integer
      slug:
        type: string
      thumbnail_url:
        example: https://ednet-images.com/lessons/go.jpg
        type: string
      title:
        type: string
      video_url:
        type: string
    type: object
  courses.LessonListSchema:
    properties:
      desc:
        type: string
      duration:
        type: integer
      is_free_preview:
        type: boolean
      is_published:
        type: boolean
      order:
        type: integer
      slug:
        type: string
      thumbnail_url:
        example: https://ednet-images.com/lessons/go.jpg
        type: string
      title:
        type: string
    type: object
  courses.LessonResponseSchema:
    properties:
      data:
        $ref: '#/definitions/courses.LessonDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.LessonsResponseSchema:
    properties:
      data:
        $ref: '#/definitions/config.PaginationResponse-courses_LessonListSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.PDFSummaryResponseSchema:
    properties:
      data:
        $ref: '#/definitions/courses.PDFSummarySchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.PDFSummarySchema:
    properties:
      points:
        type: integer
      summary:
        items:
          type: string
        type: array
    type: object
  courses.QuestionOptionSchema:
    properties:
      id:
        type: string
      is_correct:
        type: boolean
      text:
        type: string
    type: object
  courses.QuestionSchema:
    properties:
      id:
        type: string
      options:
        items:
          $ref: '#/definitions/courses.QuestionOptionSchema'
        type: array
      order:
        type: integer
      text:
        type: string
    type: object
  courses.QuizDetailSchema:
    properties:
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      is_published:
        type: boolean
      questions:
        items:
          $ref: '#/definitions/courses.QuestionSchema'
        type: array
      slug:
        type: string
      title:
        type: string
      total_questions:
        type: integer
    type: object
  courses.QuizListSchema:
    properties:
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      is_published:
        type: boolean
      slug:
        type: string
      title:
        type: string
      total_questions:
        type: integer
    type: object
  courses.QuizResponseSchema:
    properties:
      data:
        $ref: '#/definitions/courses.QuizDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.QuizResultResponseSchema:
    properties:
      data:
        $ref: '#/definitions/courses.QuizResultSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.QuizResultSchema:
    properties:
      answers:
        items:
          $ref: '#/definitions/courses.AnswerSchema'
        type: array
      completed_at:
        type: string
      id:
        type: string
      score:
        type: number
      started_at:
        type: string
      time_taken:
        type: integer
    type: object
  courses.QuizSubmissionSchema:
    properties:
      answers:
        items:
          $ref: '#/definitions/courses.SubmitAnswerSchema'
        minItems: 1
        type: array
      time_taken:
        description: in seconds
        minimum: 1
        type: integer
    required:
    - answers
    - time_taken
    type: object
  courses.QuizzesResponseSchema:
    properties:
      data:
        $ref: '#/definitions/config.PaginationResponse-courses_QuizListSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  courses.SubmitAnswerSchema:
    properties:
      question_id:
        type: string
      selected_option_id:
        type: string
    required:
    - question_id
    - selected_option_id
    type: object
  enrollment.PaymentStatus:
    enum:
    - pending
    - successful
    - cancelled
    - pending
    - failed
    type: string
    x-enum-varnames:
    - DefaultPaymentStatus
    - PaymentStatusSuccessful
    - PaymentStatusCancelled
    - PaymentStatusPending
    - PaymentStatusFailed
  enrollment.Status:
    enum:
    - inactive
    - inactive
    - active
    - completed
    - dropped
    type: string
    x-enum-varnames:
    - DefaultStatus
    - StatusInactive
    - StatusActive
    - StatusCompleted
    - StatusDropped
  general.SiteDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/general.SiteDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  general.SiteDetailSchema:
    properties:
      address:
        example: 234, Lagos, Nigeria
        type: string
      email:
        example: johndoe@email.com
        type: string
      fb:
        example: https://facebook.com
        type: string
      ig:
        example: https://instagram.com
        type: string
      name:
        example: EDNET
        type: string
      phone:
        example: "+2348133831036"
        type: string
      tw:
        example: https://twitter.com
        type: string
      wh:
        example: https://wa.me/2348133831036
        type: string
    type: object
  instructors.QuizCreateSchema:
    properties:
      description:
        maxLength: 10000
        minLength: 10
        type: string
      duration:
        type: integer
      is_published:
        type: boolean
      questions:
        items:
          $ref: '#/definitions/courses.QuestionSchema'
        minItems: 1
        type: array
      title:
        maxLength: 255
        minLength: 10
        type: string
    required:
    - description
    - duration
    - questions
    - title
    type: object
  profiles.CourseProgressResponseData:
    properties:
      percentage:
        type: number
    type: object
  profiles.CourseProgressResponseSchema:
    properties:
      data:
        $ref: '#/definitions/profiles.CourseProgressResponseData'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  profiles.LessonProgressInputSchema:
    properties:
      is_completed:
        type: boolean
    type: object
  profiles.LessonProgressResponseData:
    properties:
      completed_at:
        type: string
      id:
        type: string
    type: object
  profiles.LessonProgressResponseSchema:
    properties:
      data:
        $ref: '#/definitions/profiles.LessonProgressResponseData'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  profiles.ProfileResponseSchema:
    properties:
      data:
        $ref: '#/definitions/profiles.ProfileSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  profiles.ProfileSchema:
    properties:
      avatar:
        example: https://ednet-images.com/users/john-doe
        type: string
      bio:
        example: I'm the boss
        type: string
      dob:
        example: "2000-09-12"
        type: string
      email:
        example: johndoe@example.com
        type: string
      name:
        example: John Doe
        type: string
      role:
        allOf:
        - $ref: '#/definitions/user.Role'
        example: student
      username:
        example: johndoe
        type: string
    type: object
  routes.HealthCheckSchema:
    properties:
      success:
        example: pong
        type: string
    type: object
  user.Role:
    enum:
    - student
    - student
    - instructor
    - admin
    type: string
    x-enum-varnames:
    - DefaultRole
    - RoleStudent
    - RoleInstructor
    - RoleAdmin
info:
  contact: {}
  description: |-
    ## A Full-Featured EDTECH API built with FIBER & ENT ORM.

    <!-- ### WEBSOCKETS:

    #### Notifications

    - URL: `wss://{host}/api/v4/ws/notifications`

    - Requires authorization, so pass in the Bearer Authorization header.

    - You can only read and not send notification messages into this socket. -->


    <!-- #### Chats

    - URL: `wss://{host}/api/v4/ws/chats/{id}`
    - Requires authorization, so pass in the Bearer Authorization header.
    - Use chat_id as the ID for an existing chat or username if it's the first message in a DM.
    - You cannot read realtime messages from a username that doesn't belong to the authorized user, but you can surely send messages.
    - Only send a message to the socket endpoint after the message has been created or updated, and files have been uploaded.
    - Fields when sending a message through the socket:

      ```json
      { "status": "CREATED", "id": "fe4e0235-80fc-4c94-b15e-3da63226f8ab" }
      ``` -->
  title: EDNET API
  version: "1.0"
paths:
  /auth/google:
    post:
      description: |-
        `This endpoint generates new access and refresh tokens for authentication via google`
        `Pass in token gotten from gsi client authentication here in payload to retrieve tokens for authorization`
      parameters:
      - description: Google auth
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/accounts.TokenSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounts.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Login a user via google
      tags:
      - Auth
  /auth/login:
    post:
      description: '`This endpoint generates new access and refresh tokens for authentication`'
      parameters:
      - description: User login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/accounts.LoginSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounts.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Login a user
      tags:
      - Auth
  /auth/logout:
    get:
      description: '`This endpoint logs a user out from our application from a single
        device`'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - Auth
  /auth/logout/all:
    get:
      description: '`This endpoint logs a user out from our application from all devices`'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
      security:
      - BearerAuth: []
      summary: Logout a user from all devices
      tags:
      - Auth
  /auth/refresh:
    post:
      description: '`This endpoint refresh tokens by generating new access and refresh
        tokens for a user`'
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/accounts.TokenSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounts.LoginResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Refresh tokens
      tags:
      - Auth
  /auth/register:
    post:
      description: '`This endpoint registers new users into our application.`'
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/accounts.RegisterSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounts.RegisterResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Register a new user
      tags:
      - Auth
  /auth/resend-verification-email:
    post:
      description: '`This endpoint resends new otp to the user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/accounts.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/send-password-reset-otp:
    post:
      description: '`This endpoint sends new password reset otp to the user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/accounts.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Send Password Reset Otp
      tags:
      - Auth
  /auth/set-new-password:
    post:
      description: '`This endpoint verifies the password reset otp.`'
      parameters:
      - description: Password reset object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/accounts.SetNewPasswordSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Set New Password
      tags:
      - Auth
  /auth/verify-email:
    post:
      description: '`This endpoint verifies a user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email_data
        required: true
        schema:
          $ref: '#/definitions/accounts.VerifyEmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Verify a user's email
      tags:
      - Auth
  /courses:
    get:
      description: This endpoint retrieves paginated responses of latest courses
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      - description: Filter By Instructor's Name Or Username
        in: query
        name: instructor
        type: string
      - description: Filter By Free Status
        in: query
        name: isFree
        type: boolean
      - description: Sort By Rating (asc or desc)
        in: query
        name: sortByRating
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.CoursesResponseSchema'
      summary: Retrieve Latest Courses
      tags:
      - Courses
  /courses/{course_slug}/lessons/{lesson_slug}:
    get:
      description: This endpoint retrieves the details of a particular lesson
      parameters:
      - description: Course Slug
        in: path
        name: course_slug
        required: true
        type: string
      - description: Lesson Slug
        in: path
        name: lesson_slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.LessonResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      summary: Retrieve Lesson Details
      tags:
      - Courses
  /courses/{slug}:
    get:
      description: This endpoint retrieves the details of a particular course
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.CourseResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      summary: Retrieve Course Details
      tags:
      - Courses
  /courses/{slug}/enroll:
    post:
      description: This endpoint allows a user to enroll for a specific course
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Enrollment object
        in: body
        name: enrollment
        required: true
        schema:
          $ref: '#/definitions/courses.EnrollForACourseSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.EnrollmentResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      security:
      - BearerAuth: []
      summary: Enroll for a course
      tags:
      - Courses
  /courses/{slug}/lessons:
    get:
      description: This endpoint retrieves paginated responses of a course lessons
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      - description: Filter By Free Preview
        in: query
        name: isFreePreview
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.LessonsResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      summary: Retrieve Course Lessons
      tags:
      - Courses
  /courses/lessons/{slug}/quizzes:
    get:
      description: This endpoint retrieves paginated responses of a lesson quizzes
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizzesResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Lesson Quizzes
      tags:
      - Courses
  /courses/pdf/summarize:
    post:
      consumes:
      - multipart/form-data
      description: '`This endpoint accepts a PDF file and returns a summarized version
        of its content.`'
      parameters:
      - description: PDF file to summarize
        in: formData
        name: file
        required: true
        type: file
      - default: 30
        description: Maximum number of summary points
        in: query
        name: max_points
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.PDFSummaryResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
      security:
      - BearerAuth: []
      summary: Summarize a PDF document
      tags:
      - Courses
  /courses/quizzes/{quiz_slug}:
    get:
      description: This endpoint retrieves the details of a particular quiz
      parameters:
      - description: Quiz Slug
        in: path
        name: quiz_slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Quiz Details
      tags:
      - Courses
  /courses/quizzes/{quiz_slug}/results:
    get:
      description: '`This endpoint retrieves the result of a particular quiz for a
        user`'
      parameters:
      - description: Quiz Slug
        in: path
        name: quiz_slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizResultResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Quiz Result
      tags:
      - Courses
    post:
      description: |-
        `This endpoint allows a user to submit their answers for a quiz`
        `If this submission is for the last quiz in the course, a certificate will be generated`
      parameters:
      - description: Quiz Slug
        in: path
        name: quiz_slug
        required: true
        type: string
      - description: Submission object
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/courses.QuizSubmissionSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizResultResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      security:
      - BearerAuth: []
      summary: Submit Quiz
      tags:
      - Courses
  /courses/quizzes/{quiz_slug}/start:
    get:
      description: '`This endpoint allows a user to start a quiz`'
      parameters:
      - description: Quiz Slug
        in: path
        name: quiz_slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Start Quiz
      tags:
      - Courses
  /general/site-detail:
    get:
      description: This endpoint retrieves few details of the site/application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/general.SiteDetailResponseSchema'
      summary: Retrieve site details
      tags:
      - General
  /healthcheck:
    get:
      description: This endpoint checks the health of our application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.HealthCheckSchema'
      summary: HealthCheck
      tags:
      - HealthCheck
  /instructor/courses:
    get:
      description: '`This endpoint retrieves paginated responses of the authenticated
        instructor courses`'
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      - description: Filter By Free Status
        in: query
        name: isFree
        type: boolean
      - description: Filter By Published Status
        in: query
        name: isPublished
        type: boolean
      - description: Sort By Rating (asc or desc)
        in: query
        name: sortByRating
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.CoursesResponseSchema'
      security:
      - BearerAuth: []
      summary: Retrieve Courses
      tags:
      - Instructor
    post:
      description: '`This endpoint allows an instructor to create a course`'
      parameters:
      - in: formData
        name: category_slug
        required: true
        type: string
      - in: formData
        name: certification
        type: boolean
      - in: formData
        maxLength: 10000
        minLength: 10
        name: desc
        required: true
        type: string
      - enum:
        - beginner
        - beginner
        - intermediate
        - advanced
        in: formData
        name: difficulty
        required: true
        type: string
        x-enum-varnames:
        - DefaultDifficulty
        - DifficultyBeginner
        - DifficultyIntermediate
        - DifficultyAdvanced
      - in: formData
        name: discount_price
        required: true
        type: number
      - in: formData
        name: duration
        required: true
        type: integer
      - enum:
        - open
        - open
        - restricted
        - invite_only
        in: formData
        name: enrollment_type
        required: true
        type: string
        x-enum-varnames:
        - DefaultEnrollmentType
        - EnrollmentTypeOpen
        - EnrollmentTypeRestricted
        - EnrollmentTypeInviteOnly
      - in: formData
        name: is_free
        type: boolean
      - example: English
        in: formData
        name: language
        required: true
        type: string
      - in: formData
        name: price
        required: true
        type: number
      - in: formData
        maxLength: 50
        minLength: 10
        name: title
        required: true
        type: string
      - description: Thumbnail to upload
        in: formData
        name: thumbnail
        required: true
        type: file
      - description: Intro video to upload
        in: formData
        name: intro_video
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/courses.CourseResponseSchema'
      security:
      - BearerAuth: []
      summary: Create A Course
      tags:
      - Instructor
  /instructor/courses/{slug}:
    delete:
      description: '`This endpoint allows an authenticated instructor to delete a
        course`'
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Delete A Course
      tags:
      - Instructor
    get:
      description: '`This endpoint retrieves the details of a particular course for
        the authenticated instructor`'
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.CourseResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Course Details
      tags:
      - Instructor
    put:
      description: '`This endpoint allows an instructor to update a course`'
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      - in: formData
        name: category_slug
        required: true
        type: string
      - in: formData
        name: certification
        type: boolean
      - in: formData
        maxLength: 10000
        minLength: 10
        name: desc
        required: true
        type: string
      - enum:
        - beginner
        - beginner
        - intermediate
        - advanced
        in: formData
        name: difficulty
        required: true
        type: string
        x-enum-varnames:
        - DefaultDifficulty
        - DifficultyBeginner
        - DifficultyIntermediate
        - DifficultyAdvanced
      - in: formData
        name: discount_price
        required: true
        type: number
      - in: formData
        name: duration
        required: true
        type: integer
      - enum:
        - open
        - open
        - restricted
        - invite_only
        in: formData
        name: enrollment_type
        required: true
        type: string
        x-enum-varnames:
        - DefaultEnrollmentType
        - EnrollmentTypeOpen
        - EnrollmentTypeRestricted
        - EnrollmentTypeInviteOnly
      - in: formData
        name: is_free
        type: boolean
      - example: English
        in: formData
        name: language
        required: true
        type: string
      - in: formData
        name: price
        required: true
        type: number
      - in: formData
        maxLength: 50
        minLength: 10
        name: title
        required: true
        type: string
      - description: Thumbnail to upload
        in: formData
        name: thumbnail
        type: file
      - description: Intro video to upload
        in: formData
        name: intro_video
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.CourseResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Update A Course
      tags:
      - Instructor
  /instructor/courses/{slug}/lessons:
    get:
      description: '`This endpoint retrieves the lessons of a particular course for
        the authenticated instructor`'
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      - description: Filter By Free Preview
        in: query
        name: isFreePreview
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.LessonsResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Course Lessons
      tags:
      - Instructor
    post:
      description: '`This endpoint creates a lesson of a particular course for the
        authenticated instructor`'
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      - in: formData
        maxLength: 10000
        minLength: 10
        name: content
        type: string
      - in: formData
        maxLength: 10000
        minLength: 10
        name: desc
        required: true
        type: string
      - in: formData
        name: duration
        required: true
        type: integer
      - in: formData
        name: is_free_preview
        type: boolean
      - in: formData
        name: is_published
        type: boolean
      - in: formData
        name: order
        required: true
        type: integer
      - in: formData
        maxLength: 50
        minLength: 10
        name: title
        required: true
        type: string
      - description: Thumbnail to upload
        in: formData
        name: thumbnail
        required: true
        type: file
      - description: Video to upload
        in: formData
        name: video
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/courses.LessonResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Create Course Lesson
      tags:
      - Instructor
  /instructor/lessons/{slug}:
    delete:
      description: This endpoint deletes a particular lesson belonging to an instructor
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Delete Instructor Lesson Details
      tags:
      - Instructor
    get:
      description: This endpoint retrieves the details of a particular lesson belonging
        to an instructor
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.LessonResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Instructor Lesson Details
      tags:
      - Instructor
    put:
      description: '`This endpoint updates a lesson of a particular course for the
        authenticated instructor`'
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      - in: formData
        maxLength: 10000
        minLength: 10
        name: content
        type: string
      - in: formData
        maxLength: 10000
        minLength: 10
        name: desc
        required: true
        type: string
      - in: formData
        name: duration
        required: true
        type: integer
      - in: formData
        name: is_free_preview
        type: boolean
      - in: formData
        name: is_published
        type: boolean
      - in: formData
        name: order
        required: true
        type: integer
      - in: formData
        maxLength: 50
        minLength: 10
        name: title
        required: true
        type: string
      - description: Thumbnail to upload
        in: formData
        name: thumbnail
        type: file
      - description: Video to upload
        in: formData
        name: video
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.LessonResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Update Course Lesson
      tags:
      - Instructor
  /instructor/lessons/{slug}/quizzes:
    get:
      description: '`This endpoint retrieves the quizzes of a particular lesson for
        the authenticated instructor`'
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      - description: Filter By Published Status
        in: query
        name: isPublished
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizzesResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Lesson Quizzes
      tags:
      - Instructor
    post:
      description: '`This endpoint creates a quiz of a particular lesson for the authenticated
        instructor`'
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Quiz object
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/instructors.QuizCreateSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/courses.QuizResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Create Lesson Quiz
      tags:
      - Instructor
  /instructor/quizzes/{slug}:
    delete:
      description: This endpoint deletes a particular quiz belonging to an instructor
      parameters:
      - description: Quiz Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Delete Instructor Quiz
      tags:
      - Instructor
    get:
      description: This endpoint retrieves the details of a particular quiz belonging
        to an instructor
      parameters:
      - description: Quiz Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Retrieve Instructor Quiz Details
      tags:
      - Instructor
    put:
      description: '`This endpoint updates a quiz of a particular course for the authenticated
        instructor`'
      parameters:
      - description: Quiz Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Quiz object
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/instructors.QuizCreateSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.QuizResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Update Course Quiz
      tags:
      - Instructor
  /profiles:
    get:
      description: '`This endpoint allows a user to view his/her profile`'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.ProfileResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
      security:
      - BearerAuth: []
      summary: Get Your Profile
      tags:
      - Profiles
    put:
      description: '`This endpoint allows a user to update his/her profile`'
      parameters:
      - example: I'm the boss
        in: formData
        maxLength: 300
        minLength: 10
        name: bio
        type: string
      - example: "2000-09-12"
        in: formData
        name: dob
        type: string
      - example: John Doe
        in: formData
        maxLength: 150
        minLength: 10
        name: name
        required: true
        type: string
      - example: john-doe
        in: formData
        maxLength: 50
        minLength: 2
        name: username
        required: true
        type: string
      - description: Profile picture to upload
        in: formData
        name: avatar
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.ProfileResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      security:
      - BearerAuth: []
      summary: Update Your Profile
      tags:
      - Profiles
  /profiles/courses:
    get:
      description: '`This endpoint allows a user to view his/her enrolled courses`'
      parameters:
      - default: 1
        description: Current Page
        in: query
        name: page
        type: integer
      - default: 100
        description: Page Limit
        in: query
        name: limit
        type: integer
      - description: Filter By Title
        in: query
        name: title
        type: string
      - description: Filter By Status (inactive, active, completed, dropped)
        in: query
        name: status
        type: string
      - description: Filter By Instructor's Name Or Username
        in: query
        name: instructor
        type: string
      - description: Filter By Free Status
        in: query
        name: isFree
        type: boolean
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/courses.CoursesResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
      security:
      - BearerAuth: []
      summary: Get Your Enrolled Courses
      tags:
      - Profiles
  /profiles/courses/{slug}/progress:
    get:
      description: '`This endpoint allows a user to get his/her course progress`'
      parameters:
      - description: Course Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.CourseProgressResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Get Course Progress
      tags:
      - Profiles
  /profiles/lessons/{slug}/progress:
    get:
      description: '`This endpoint allows a user to get his/her lesson progress`'
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profiles.LessonProgressResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
      security:
      - BearerAuth: []
      summary: Get Lesson Progress
      tags:
      - Profiles
    post:
      description: '`This endpoint allows a user to create or update a lesson progress`'
      parameters:
      - description: Lesson Slug
        in: path
        name: slug
        required: true
        type: string
      - description: Lesson Progress object
        in: body
        name: lesson_progress
        required: true
        schema:
          $ref: '#/definitions/profiles.LessonProgressInputSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/profiles.LessonProgressResponseSchema'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/base.UnauthorizedErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      security:
      - BearerAuth: []
      summary: Create/Update Lesson Progress
      tags:
      - Profiles
produces:
- application/json
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type 'Bearer jwt_string' to correctly set the API Key
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
