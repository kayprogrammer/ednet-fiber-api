basePath: /api/v1
consumes:
- application/json
definitions:
  accounts.EmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
    required:
    - email
    type: object
  accounts.RegisterResponseSchema:
    properties:
      data:
        $ref: '#/definitions/accounts.EmailRequestSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  accounts.RegisterSchema:
    properties:
      email:
        example: johndoe@example.com
        minLength: 5
        type: string
      name:
        example: John Doe
        maxLength: 50
        type: string
      password:
        example: strongpassword
        maxLength: 50
        minLength: 8
        type: string
      username:
        example: johndoe
        maxLength: 50
        type: string
    required:
    - email
    - name
    - password
    - username
    type: object
  accounts.VerifyEmailRequestSchema:
    properties:
      email:
        example: johndoe@email.com
        minLength: 5
        type: string
      otp:
        example: 123456
        type: integer
    required:
    - email
    - otp
    type: object
  base.FieldData:
    properties:
      field:
        example: This field is required
        type: string
    type: object
  base.InvalidErrorExample:
    properties:
      message:
        example: Request was invalid due to ...
        type: string
      status:
        example: failure
        type: string
    type: object
  base.NotFoundErrorExample:
    properties:
      message:
        example: The item was not found
        type: string
      status:
        example: failure
        type: string
    type: object
  base.ResponseSchema:
    properties:
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  base.ValidationErrorExample:
    properties:
      data:
        $ref: '#/definitions/base.FieldData'
      message:
        example: Invalid Entry
        type: string
      status:
        example: failure
        type: string
    type: object
  general.SiteDetailResponseSchema:
    properties:
      data:
        $ref: '#/definitions/general.SiteDetailSchema'
      message:
        example: Data fetched/created/updated/deleted
        type: string
      status:
        example: success
        type: string
    type: object
  general.SiteDetailSchema:
    properties:
      address:
        example: 234, Lagos, Nigeria
        type: string
      email:
        example: johndoe@email.com
        type: string
      fb:
        example: https://facebook.com
        type: string
      ig:
        example: https://instagram.com
        type: string
      name:
        example: EDNET
        type: string
      phone:
        example: "+2348133831036"
        type: string
      tw:
        example: https://twitter.com
        type: string
      wh:
        example: https://wa.me/2348133831036
        type: string
    type: object
  routes.HealthCheckSchema:
    properties:
      success:
        example: pong
        type: string
    type: object
info:
  contact: {}
  description: |-
    ## A Full-Featured EDTECH API built with FIBER & ENT ORM.

    <!-- ### WEBSOCKETS:

    #### Notifications

    - URL: `wss://{host}/api/v4/ws/notifications`

    - Requires authorization, so pass in the Bearer Authorization header.

    - You can only read and not send notification messages into this socket. -->


    <!-- #### Chats

    - URL: `wss://{host}/api/v4/ws/chats/{id}`
    - Requires authorization, so pass in the Bearer Authorization header.
    - Use chat_id as the ID for an existing chat or username if it's the first message in a DM.
    - You cannot read realtime messages from a username that doesn't belong to the authorized user, but you can surely send messages.
    - Only send a message to the socket endpoint after the message has been created or updated, and files have been uploaded.
    - Fields when sending a message through the socket:

      ```json
      { "status": "CREATED", "id": "fe4e0235-80fc-4c94-b15e-3da63226f8ab" }
      ``` -->
  title: EDNET API
  version: "1.0"
paths:
  /auth/register:
    post:
      description: '`This endpoint registers new users into our application.`'
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/accounts.RegisterSchema'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/accounts.RegisterResponseSchema'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Register a new user
      tags:
      - Auth
  /auth/resend-verification-email:
    post:
      description: '`This endpoint resends new otp to the user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/accounts.EmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Resend Verification Email
      tags:
      - Auth
  /auth/verify-email:
    post:
      description: '`This endpoint verifies a user''s email.`'
      parameters:
      - description: Email object
        in: body
        name: email_data
        required: true
        schema:
          $ref: '#/definitions/accounts.VerifyEmailRequestSchema'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseSchema'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/base.InvalidErrorExample'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/base.NotFoundErrorExample'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/base.ValidationErrorExample'
      summary: Verify a user's email
      tags:
      - Auth
  /general/site-detail:
    get:
      description: This endpoint retrieves few details of the site/application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/general.SiteDetailResponseSchema'
      summary: Retrieve site details
      tags:
      - General
  /healthcheck:
    get:
      description: This endpoint checks the health of our application.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.HealthCheckSchema'
      summary: HealthCheck
      tags:
      - HealthCheck
produces:
- application/json
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type 'Bearer jwt_string' to correctly set the API Key
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
